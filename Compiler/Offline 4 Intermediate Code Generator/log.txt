Line 2: type_specifier : INT

int 

Line 2: declaration_list : ID

x

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int x;


Line 2: unit : var_declaration

int x;


Line 2: program : unit

int x;


Line 3: type_specifier : INT

int 

Line 3: declaration_list : ID LTHIRD CONST_INT RTHIRD

mema[5]

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int mema[5];


Line 3: unit : var_declaration

int mema[5];


Line 3: program : program unit

int x;
int mema[5];


Line 4: type_specifier : INT

int 

Line 7: type_specifier : INT

int 

Line 7: declaration_list : ID

i

Line 7: var_declaration : type_specifier declaration_list SEMICOLON

int i;


Line 7: statement : var_declaration

int i;


Line 7: statements : statement

int i;


Line 8: variable : ID

i

Line 8: factor : CONST_INT

1

Line 8: unary_expression : factor

1

Line 8: unary_expression : ADDOP unary_expression

-1

Line 8: term : unary_expression

-1

Line 8: simple_expression : term

-1

Line 8: rel_expression : simple_expression

-1

Line 8: logic_expression : rel_expression

-1

Line 8: expression : variable ASSIGNOP logic_expression

i=-1

Line 8: expression_statement : expression SEMICOLON

i=-1;


Line 8: statement : expression_statement

i=-1;


Line 8: statements : statements statement

int i;
i=-1;


Line 9: factor : CONST_INT

1

Line 9: unary_expression : factor

1

Line 9: term : unary_expression

1

Line 9: simple_expression : term

1

Line 9: rel_expression : simple_expression

1

Line 9: logic_expression : rel_expression

1

Line 9: expression : logic expression

1

Line 11: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(i);


Line 11: statements : statement

println(i);


Line 12: variable : ID

i

Line 12: variable : ID

i

Line 12: factor : variable

i

Line 12: unary_expression : factor

i

Line 12: term : unary_expression

i

Line 12: simple_expression : term

i

Line 12: factor : CONST_INT

1

Line 12: unary_expression : factor

1

Line 12: term : unary_expression

1

Line 12: simple_expression : simple_expression ADDOP term

i-1

Line 12: rel_expression : simple_expression

i-1

Line 12: logic_expression : rel_expression

i-1

Line 12: expression : variable ASSIGNOP logic_expression

i=i-1

Line 12: expression_statement : expression SEMICOLON

i=i-1;


Line 12: statement : expression_statement

i=i-1;


Line 12: statements : statements statement

println(i);
i=i-1;


Line 13: compound_statement : LCURL statements RCURL

{
  println(i);
  i=i-1;
}





ScopeTable # 1.1.1



ScopeTable # 1.1
 15 --> < i , ID{disp = -2} > 



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 


Line 13: statement : compound_statement

{
  println(i);
  i=i-1;
}



Line 13: statement : WHILE LPAREN expression RPAREN statement

while (1){
  println(i);
  i=i-1;
}



Line 13: statements : statements statement

int i;
i=-1;
while (1){
  println(i);
  i=i-1;
}



Line 15: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(x);


Line 15: statements : statements statement

int i;
i=-1;
while (1){
  println(i);
  i=i-1;
}

println(x);


Line 16: compound_statement : LCURL statements RCURL

{
  int i;
  i=-1;
  while (1){
    println(i);
    i=i-1;
  }
  println(x);
}





ScopeTable # 1.1
 15 --> < i , ID{disp = -2} > 



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 


Line 16: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
  int i;
  i=-1;
  while (1){
    println(i);
    i=i-1;
  }
  println(x);
}



Line 16: unit : func_definition

int main(){
  int i;
  i=-1;
  while (1){
    println(i);
    i=i-1;
  }
  println(x);
}



Line 16: program : program unit

int x;
int mema[5];
int main(){
  int i;
  i=-1;
  while (1){
    println(i);
    i=i-1;
  }
  println(x);
}



Line 16: start : program



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 



Total lines: 16
Total errors: 0

