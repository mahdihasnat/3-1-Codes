Line 2: type_specifier : INT

int 

Line 2: declaration_list : ID

x

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int x;


Line 2: unit : var_declaration

int x;


Line 2: program : unit

int x;


Line 3: type_specifier : INT

int 

Line 3: declaration_list : ID LTHIRD CONST_INT RTHIRD

mema[5]

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int mema[5];


Line 3: unit : var_declaration

int mema[5];


Line 3: program : program unit

int x;
int mema[5];


Line 4: type_specifier : INT

int 

Line 8: type_specifier : INT

int 

Line 8: declaration_list : ID

y

Line 8: var_declaration : type_specifier declaration_list SEMICOLON

int y;


Line 8: statement : var_declaration

int y;


Line 8: statements : statement

int y;


Line 10: variable : ID

x

Line 10: factor : CONST_INT

0

Line 10: unary_expression : factor

0

Line 10: term : unary_expression

0

Line 10: simple_expression : term

0

Line 10: rel_expression : simple_expression

0

Line 10: logic_expression : rel_expression

0

Line 10: expression : variable ASSIGNOP logic_expression

x=0

Line 10: expression_statement : expression SEMICOLON

x=0;


Line 10: variable : ID

x

Line 10: factor : variable

x

Line 10: unary_expression : factor

x

Line 10: term : unary_expression

x

Line 10: simple_expression : term

x

Line 10: factor : CONST_INT

20

Line 10: unary_expression : factor

20

Line 10: term : unary_expression

20

Line 10: simple_expression : term

20

Line 10: rel_expression : simple_expression RELOP simple_expression

x<20

Line 10: logic_expression : rel_expression

x<20

Line 10: expression : logic expression

x<20

Line 10: expression_statement : expression SEMICOLON

x<20;


Line 10: variable : ID

x

Line 10: variable : ID

x

Line 10: factor : variable

x

Line 10: unary_expression : factor

x

Line 10: term : unary_expression

x

Line 10: simple_expression : term

x

Line 10: factor : CONST_INT

1

Line 10: unary_expression : factor

1

Line 10: term : unary_expression

1

Line 10: simple_expression : simple_expression ADDOP term

x+1

Line 10: rel_expression : simple_expression

x+1

Line 10: logic_expression : rel_expression

x+1

Line 10: expression : variable ASSIGNOP logic_expression

x=x+1

Line 13: variable : ID

y

Line 13: factor : CONST_INT

0

Line 13: unary_expression : factor

0

Line 13: term : unary_expression

0

Line 13: simple_expression : term

0

Line 13: rel_expression : simple_expression

0

Line 13: logic_expression : rel_expression

0

Line 13: expression : variable ASSIGNOP logic_expression

y=0

Line 13: expression_statement : expression SEMICOLON

y=0;


Line 13: variable : ID

y

Line 13: factor : variable

y

Line 13: unary_expression : factor

y

Line 13: term : unary_expression

y

Line 13: simple_expression : term

y

Line 13: variable : ID

x

Line 13: factor : variable

x

Line 13: unary_expression : factor

x

Line 13: term : unary_expression

x

Line 13: simple_expression : term

x

Line 13: rel_expression : simple_expression RELOP simple_expression

y<x

Line 13: logic_expression : rel_expression

y<x

Line 13: expression : logic expression

y<x

Line 13: expression_statement : expression SEMICOLON

y<x;


Line 13: variable : ID

y

Line 13: variable : ID

y

Line 13: factor : variable

y

Line 13: unary_expression : factor

y

Line 13: term : unary_expression

y

Line 13: simple_expression : term

y

Line 13: factor : CONST_INT

1

Line 13: unary_expression : factor

1

Line 13: term : unary_expression

1

Line 13: simple_expression : simple_expression ADDOP term

y+1

Line 13: rel_expression : simple_expression

y+1

Line 13: logic_expression : rel_expression

y+1

Line 13: expression : variable ASSIGNOP logic_expression

y=y+1

Line 14: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(x);


Line 14: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(y=0;y<x;y=y+1)println(x);


Line 14: statements : statement

for(y=0;y<x;y=y+1)println(x);


Line 15: compound_statement : LCURL statements RCURL

{
  for(y=0;  y<x;  y=y+1)println(x);
}





ScopeTable # 1.1.1



ScopeTable # 1.1
 1 --> < y , ID{disp = -2} > 



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 


Line 15: statement : compound_statement

{
  for(y=0;  y<x;  y=y+1)println(x);
}



Line 15: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(x=0;x<20;x=x+1){
  for(y=0;  y<x;  y=y+1)println(x);
}



Line 15: statements : statements statement

int y;
for(x=0;x<20;x=x+1){
  for(y=0;  y<x;  y=y+1)println(x);
}



Line 16: variable : ID

x

Line 16: factor : CONST_INT

12

Line 16: unary_expression : factor

12

Line 16: term : unary_expression

12

Line 16: factor : CONST_INT

12

Line 16: unary_expression : factor

12

Line 16: term : term MULOP unary_expression

12*12

Line 16: simple_expression : term

12*12

Line 16: rel_expression : simple_expression

12*12

Line 16: logic_expression : rel_expression

12*12

Line 16: expression : variable ASSIGNOP logic_expression

x=12*12

Line 16: expression_statement : expression SEMICOLON

x=12*12;


Line 16: statement : expression_statement

x=12*12;


Line 16: statements : statements statement

int y;
for(x=0;x<20;x=x+1){
  for(y=0;  y<x;  y=y+1)println(x);
}

x=12*12;


Line 17: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(x);


Line 17: statements : statements statement

int y;
for(x=0;x<20;x=x+1){
  for(y=0;  y<x;  y=y+1)println(x);
}

x=12*12;
println(x);


Line 19: compound_statement : LCURL statements RCURL

{
  int y;
  for(x=0;  x<20;  x=x+1){
    for(y=0;    y<x;    y=y+1)println(x);
  }
  x=12*12;
  println(x);
}





ScopeTable # 1.1
 1 --> < y , ID{disp = -2} > 



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 


Line 19: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
  int y;
  for(x=0;  x<20;  x=x+1){
    for(y=0;    y<x;    y=y+1)println(x);
  }
  x=12*12;
  println(x);
}



Line 19: unit : func_definition

int main(){
  int y;
  for(x=0;  x<20;  x=x+1){
    for(y=0;    y<x;    y=y+1)println(x);
  }
  x=12*12;
  println(x);
}



Line 19: program : program unit

int x;
int mema[5];
int main(){
  int y;
  for(x=0;  x<20;  x=x+1){
    for(y=0;    y<x;    y=y+1)println(x);
  }
  x=12*12;
  println(x);
}



Line 19: start : program



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 



Total lines: 19
Total errors: 0

