Line 2: type_specifier : INT

int 

Line 2: declaration_list : ID

x

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int x;


Line 2: unit : var_declaration

int x;


Line 2: program : unit

int x;


Line 3: type_specifier : INT

int 

Line 3: declaration_list : ID LTHIRD CONST_INT RTHIRD

mema[5]

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int mema[5];


Line 3: unit : var_declaration

int mema[5];


Line 3: program : program unit

int x;
int mema[5];


Line 4: type_specifier : INT

int 

Line 6: type_specifier : INT

int 

Line 6: declaration_list : ID

i

Line 6: var_declaration : type_specifier declaration_list SEMICOLON

int i;


Line 6: statement : var_declaration

int i;


Line 6: statements : statement

int i;


Line 7: variable : ID

i

Line 7: factor : CONST_INT

0

Line 7: unary_expression : factor

0

Line 7: term : unary_expression

0

Line 7: simple_expression : term

0

Line 7: rel_expression : simple_expression

0

Line 7: logic_expression : rel_expression

0

Line 7: expression : variable ASSIGNOP logic_expression

i=0

Line 7: expression_statement : expression SEMICOLON

i=0;


Line 7: variable : ID

i

Line 7: factor : variable

i

Line 7: unary_expression : factor

i

Line 7: term : unary_expression

i

Line 7: simple_expression : term

i

Line 7: factor : CONST_INT

5

Line 7: unary_expression : factor

5

Line 7: term : unary_expression

5

Line 7: simple_expression : term

5

Line 7: rel_expression : simple_expression RELOP simple_expression

i<5

Line 7: logic_expression : rel_expression

i<5

Line 7: expression : logic expression

i<5

Line 7: expression_statement : expression SEMICOLON

i<5;


Line 7: variable : ID

i

Line 7: variable : ID

i

Line 7: factor : variable

i

Line 7: unary_expression : factor

i

Line 7: term : unary_expression

i

Line 7: simple_expression : term

i

Line 7: factor : CONST_INT

1

Line 7: unary_expression : factor

1

Line 7: term : unary_expression

1

Line 7: simple_expression : simple_expression ADDOP term

i+1

Line 7: rel_expression : simple_expression

i+1

Line 7: logic_expression : rel_expression

i+1

Line 7: expression : variable ASSIGNOP logic_expression

i=i+1

Line 8: variable : ID

i

Line 8: factor : variable

i

Line 8: unary_expression : factor

i

Line 8: term : unary_expression

i

Line 8: simple_expression : term

i

Line 8: rel_expression : simple_expression

i

Line 8: logic_expression : rel_expression

i

Line 8: expression : logic expression

i

Line 8: variable : ID LTHIRD expression RTHIRD

mema[i]

Line 8: variable : ID

i

Line 8: factor : variable

i

Line 8: unary_expression : factor

i

Line 8: term : unary_expression

i

Line 8: simple_expression : term

i

Line 8: factor : CONST_INT

1

Line 8: unary_expression : factor

1

Line 8: term : unary_expression

1

Line 8: simple_expression : simple_expression ADDOP term

i+1

Line 8: rel_expression : simple_expression

i+1

Line 8: logic_expression : rel_expression

i+1

Line 8: expression : variable ASSIGNOP logic_expression

mema[i]=i+1

Line 8: expression_statement : expression SEMICOLON

mema[i]=i+1;


Line 8: statement : expression_statement

mema[i]=i+1;


Line 8: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(i=0;i<5;i=i+1)mema[i]=i+1;


Line 8: statements : statements statement

int i;
for(i=0;i<5;i=i+1)mema[i]=i+1;


Line 9: variable : ID

x

Line 9: factor : CONST_INT

10

Line 9: unary_expression : factor

10

Line 9: term : unary_expression

10

Line 9: simple_expression : term

10

Line 9: rel_expression : simple_expression

10

Line 9: logic_expression : rel_expression

10

Line 9: expression : variable ASSIGNOP logic_expression

x=10

Line 9: expression_statement : expression SEMICOLON

x=10;


Line 9: statement : expression_statement

x=10;


Line 9: statements : statements statement

int i;
for(i=0;i<5;i=i+1)mema[i]=i+1;
x=10;


Line 10: variable : ID

x

Line 10: factor : variable

x

Line 10: unary_expression : factor

x

Line 10: term : unary_expression

x

Line 10: simple_expression : term

x

Line 10: factor : CONST_INT

2

Line 10: unary_expression : factor

2

Line 10: term : unary_expression

2

Line 10: simple_expression : term

2

Line 10: rel_expression : simple_expression RELOP simple_expression

x==2

Line 10: logic_expression : rel_expression

x==2

Line 10: expression : logic expression

x==2

Line 11: variable : ID

x

Line 11: factor : CONST_INT

2

Line 11: unary_expression : factor

2

Line 11: term : unary_expression

2

Line 11: simple_expression : term

2

Line 11: rel_expression : simple_expression

2

Line 11: logic_expression : rel_expression

2

Line 11: expression : logic expression

2

Line 11: variable : ID LTHIRD expression RTHIRD

mema[2]

Line 11: factor : variable

mema[2]

Line 11: unary_expression : factor

mema[2]

Line 11: term : unary_expression

mema[2]

Line 11: simple_expression : term

mema[2]

Line 11: rel_expression : simple_expression

mema[2]

Line 11: logic_expression : rel_expression

mema[2]

Line 11: expression : variable ASSIGNOP logic_expression

x=mema[2]

Line 11: expression_statement : expression SEMICOLON

x=mema[2];


Line 11: statement : expression_statement

x=mema[2];


Line 12: variable : ID

x

Line 12: factor : CONST_INT

4

Line 12: unary_expression : factor

4

Line 12: term : unary_expression

4

Line 12: simple_expression : term

4

Line 12: rel_expression : simple_expression

4

Line 12: logic_expression : rel_expression

4

Line 12: expression : logic expression

4

Line 12: variable : ID LTHIRD expression RTHIRD

mema[4]

Line 12: factor : variable

mema[4]

Line 12: unary_expression : factor

mema[4]

Line 12: term : unary_expression

mema[4]

Line 12: simple_expression : term

mema[4]

Line 12: rel_expression : simple_expression

mema[4]

Line 12: logic_expression : rel_expression

mema[4]

Line 12: expression : variable ASSIGNOP logic_expression

x=mema[4]

Line 12: expression_statement : expression SEMICOLON

x=mema[4];


Line 12: statement : expression_statement

x=mema[4];


Line 12: statement : IF LPAREN expression RPAREN statement ELSE statement

if (x==2)x=mema[2];
else
x=mema[4];


Line 12: statements : statements statement

int i;
for(i=0;i<5;i=i+1)mema[i]=i+1;
x=10;
if (x==2)x=mema[2];
else
x=mema[4];


Line 13: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(x);


Line 13: statements : statements statement

int i;
for(i=0;i<5;i=i+1)mema[i]=i+1;
x=10;
if (x==2)x=mema[2];
else
x=mema[4];
println(x);


Line 14: compound_statement : LCURL statements RCURL

{
  int i;
  for(i=0;  i<5;  i=i+1)mema[i]=i+1;
  x=10;
  if (x==2)x=mema[2];
  else
  x=mema[4];
  println(x);
}





ScopeTable # 1.1
 15 --> < i , ID{disp = -2} > 



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 


Line 14: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
  int i;
  for(i=0;  i<5;  i=i+1)mema[i]=i+1;
  x=10;
  if (x==2)x=mema[2];
  else
  x=mema[4];
  println(x);
}



Line 14: unit : func_definition

int main(){
  int i;
  for(i=0;  i<5;  i=i+1)mema[i]=i+1;
  x=10;
  if (x==2)x=mema[2];
  else
  x=mema[4];
  println(x);
}



Line 14: program : program unit

int x;
int mema[5];
int main(){
  int i;
  for(i=0;  i<5;  i=i+1)mema[i]=i+1;
  x=10;
  if (x==2)x=mema[2];
  else
  x=mema[4];
  println(x);
}



Line 14: start : program



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 



Total lines: 14
Total errors: 0

