Line 2: type_specifier : INT

int 

Line 2: declaration_list : ID

x

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int x;


Line 2: unit : var_declaration

int x;


Line 2: program : unit

int x;


Line 3: type_specifier : INT

int 

Line 3: declaration_list : ID LTHIRD CONST_INT RTHIRD

mema[10]

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int mema[10];


Line 3: unit : var_declaration

int mema[10];


Line 3: program : program unit

int x;
int mema[10];


Line 4: type_specifier : INT

int 

Line 7: type_specifier : INT

int 

Line 7: declaration_list : ID

i

Line 7: var_declaration : type_specifier declaration_list SEMICOLON

int i;


Line 7: statement : var_declaration

int i;


Line 7: statements : statement

int i;


Line 8: variable : ID

i

Line 8: factor : CONST_INT

0

Line 8: unary_expression : factor

0

Line 8: term : unary_expression

0

Line 8: simple_expression : term

0

Line 8: rel_expression : simple_expression

0

Line 8: logic_expression : rel_expression

0

Line 8: expression : variable ASSIGNOP logic_expression

i=0

Line 8: expression_statement : expression SEMICOLON

i=0;


Line 8: statement : expression_statement

i=0;


Line 8: statements : statements statement

int i;
i=0;


Line 10: factor : CONST_INT

1

Line 10: unary_expression : factor

1

Line 10: term : unary_expression

1

Line 10: simple_expression : term

1

Line 10: rel_expression : simple_expression

1

Line 10: logic_expression : rel_expression

1

Line 10: expression : logic expression

1

Line 13: type_specifier : INT

int 

Line 13: declaration_list : ID

z

Line 13: var_declaration : type_specifier declaration_list SEMICOLON

int z;


Line 13: statement : var_declaration

int z;


Line 13: statements : statement

int z;


Line 14: variable : ID

z

Line 14: variable : ID

i

Line 14: factor : variable DECOP

i--

Line 14: unary_expression : factor

i--

Line 14: term : unary_expression

i--

Line 14: simple_expression : term

i--

Line 14: rel_expression : simple_expression

i--

Line 14: logic_expression : rel_expression

i--

Line 14: expression : variable ASSIGNOP logic_expression

z=i--

Line 14: expression_statement : expression SEMICOLON

z=i--;


Line 14: statement : expression_statement

z=i--;


Line 14: statements : statements statement

int z;
z=i--;


Line 15: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(z);


Line 15: statements : statements statement

int z;
z=i--;
println(z);


Line 16: variable : ID

x

Line 16: factor : variable DECOP

x--

Line 16: unary_expression : factor

x--

Line 16: term : unary_expression

x--

Line 16: simple_expression : term

x--

Line 16: rel_expression : simple_expression

x--

Line 16: logic_expression : rel_expression

x--

Line 16: expression : logic expression

x--

Line 16: expression_statement : expression SEMICOLON

x--;


Line 16: statement : expression_statement

x--;


Line 16: statements : statements statement

int z;
z=i--;
println(z);
x--;


Line 17: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(x);


Line 17: statements : statements statement

int z;
z=i--;
println(z);
x--;
println(x);


Line 18: type_specifier : INT

int 

Line 18: declaration_list : ID

j

Line 18: var_declaration : type_specifier declaration_list SEMICOLON

int j;


Line 18: statement : var_declaration

int j;


Line 18: statements : statements statement

int z;
z=i--;
println(z);
x--;
println(x);
int j;


Line 19: factor : CONST_INT

5

Line 19: unary_expression : factor

5

Line 19: term : unary_expression

5

Line 19: simple_expression : term

5

Line 19: rel_expression : simple_expression

5

Line 19: logic_expression : rel_expression

5

Line 19: expression : logic expression

5

Line 19: variable : ID LTHIRD expression RTHIRD

mema[5]

Line 19: factor : variable DECOP

mema[5]--

Line 19: unary_expression : factor

mema[5]--

Line 19: term : unary_expression

mema[5]--

Line 19: simple_expression : term

mema[5]--

Line 19: rel_expression : simple_expression

mema[5]--

Line 19: logic_expression : rel_expression

mema[5]--

Line 19: expression : logic expression

mema[5]--

Line 19: expression_statement : expression SEMICOLON

mema[5]--;


Line 19: statement : expression_statement

mema[5]--;


Line 19: statements : statements statement

int z;
z=i--;
println(z);
x--;
println(x);
int j;
mema[5]--;


Line 20: variable : ID

j

Line 20: factor : CONST_INT

5

Line 20: unary_expression : factor

5

Line 20: term : unary_expression

5

Line 20: simple_expression : term

5

Line 20: rel_expression : simple_expression

5

Line 20: logic_expression : rel_expression

5

Line 20: expression : logic expression

5

Line 20: variable : ID LTHIRD expression RTHIRD

mema[5]

Line 20: factor : variable

mema[5]

Line 20: unary_expression : factor

mema[5]

Line 20: term : unary_expression

mema[5]

Line 20: simple_expression : term

mema[5]

Line 20: rel_expression : simple_expression

mema[5]

Line 20: logic_expression : rel_expression

mema[5]

Line 20: expression : variable ASSIGNOP logic_expression

j=mema[5]

Line 20: expression_statement : expression SEMICOLON

j=mema[5];


Line 20: statement : expression_statement

j=mema[5];


Line 20: statements : statements statement

int z;
z=i--;
println(z);
x--;
println(x);
int j;
mema[5]--;
j=mema[5];


Line 21: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(j);


Line 21: statements : statements statement

int z;
z=i--;
println(z);
x--;
println(x);
int j;
mema[5]--;
j=mema[5];
println(j);


Line 22: compound_statement : LCURL statements RCURL

{
  int z;
  z=i--;
  println(z);
  x--;
  println(x);
  int j;
  mema[5]--;
  j=mema[5];
  println(j);
}





ScopeTable # 1.1.1
 2 --> < z , ID{disp = -4} > 
 16 --> < j , ID{disp = -6} > 



ScopeTable # 1.1
 15 --> < i , ID{disp = -2} > 



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 


Line 22: statement : compound_statement

{
  int z;
  z=i--;
  println(z);
  x--;
  println(x);
  int j;
  mema[5]--;
  j=mema[5];
  println(j);
}



Line 22: statement : WHILE LPAREN expression RPAREN statement

while (1){
  int z;
  z=i--;
  println(z);
  x--;
  println(x);
  int j;
  mema[5]--;
  j=mema[5];
  println(j);
}



Line 22: statements : statements statement

int i;
i=0;
while (1){
  int z;
  z=i--;
  println(z);
  x--;
  println(x);
  int j;
  mema[5]--;
  j=mema[5];
  println(j);
}



Line 24: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(x);


Line 24: statements : statements statement

int i;
i=0;
while (1){
  int z;
  z=i--;
  println(z);
  x--;
  println(x);
  int j;
  mema[5]--;
  j=mema[5];
  println(j);
}

println(x);


Line 25: compound_statement : LCURL statements RCURL

{
  int i;
  i=0;
  while (1){
    int z;
    z=i--;
    println(z);
    x--;
    println(x);
    int j;
    mema[5]--;
    j=mema[5];
    println(j);
  }
  println(x);
}





ScopeTable # 1.1
 15 --> < i , ID{disp = -2} > 



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 


Line 25: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
  int i;
  i=0;
  while (1){
    int z;
    z=i--;
    println(z);
    x--;
    println(x);
    int j;
    mema[5]--;
    j=mema[5];
    println(j);
  }
  println(x);
}



Line 25: unit : func_definition

int main(){
  int i;
  i=0;
  while (1){
    int z;
    z=i--;
    println(z);
    x--;
    println(x);
    int j;
    mema[5]--;
    j=mema[5];
    println(j);
  }
  println(x);
}



Line 25: program : program unit

int x;
int mema[10];
int main(){
  int i;
  i=0;
  while (1){
    int z;
    z=i--;
    println(z);
    x--;
    println(x);
    int j;
    mema[5]--;
    j=mema[5];
    println(j);
  }
  println(x);
}



Line 25: start : program



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 



Total lines: 25
Total errors: 0

