Line 2: type_specifier : INT

int 

Line 2: declaration_list : ID

x

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int x;


Line 2: unit : var_declaration

int x;


Line 2: program : unit

int x;


Line 3: type_specifier : INT

int 

Line 3: declaration_list : ID LTHIRD CONST_INT RTHIRD

mema[5]

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int mema[5];


Line 3: unit : var_declaration

int mema[5];


Line 3: program : program unit

int x;
int mema[5];


Line 4: type_specifier : INT

int 

Line 7: type_specifier : INT

int 

Line 7: declaration_list : ID

y

Line 7: var_declaration : type_specifier declaration_list SEMICOLON

int y;


Line 7: statement : var_declaration

int y;


Line 7: statements : statement

int y;


Line 8: type_specifier : INT

int 

Line 8: declaration_list : ID LTHIRD CONST_INT RTHIRD

z[30]

Line 8: var_declaration : type_specifier declaration_list SEMICOLON

int z[30];


Line 8: statement : var_declaration

int z[30];


Line 8: statements : statements statement

int y;
int z[30];


Line 9: variable : ID

y

Line 9: factor : CONST_INT

3

Line 9: unary_expression : factor

3

Line 9: term : unary_expression

3

Line 9: simple_expression : term

3

Line 9: rel_expression : simple_expression

3

Line 9: logic_expression : rel_expression

3

Line 9: expression : variable ASSIGNOP logic_expression

y=3

Line 9: expression_statement : expression SEMICOLON

y=3;


Line 9: statement : expression_statement

y=3;


Line 9: statements : statements statement

int y;
int z[30];
y=3;


Line 9: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(y);


Line 9: statements : statements statement

int y;
int z[30];
y=3;
println(y);


Line 10: factor : CONST_INT

3

Line 10: unary_expression : factor

3

Line 10: term : unary_expression

3

Line 10: simple_expression : term

3

Line 10: rel_expression : simple_expression

3

Line 10: logic_expression : rel_expression

3

Line 10: expression : logic expression

3

Line 10: variable : ID LTHIRD expression RTHIRD

z[3]

Line 10: factor : CONST_INT

4

Line 10: unary_expression : factor

4

Line 10: term : unary_expression

4

Line 10: simple_expression : term

4

Line 10: rel_expression : simple_expression

4

Line 10: logic_expression : rel_expression

4

Line 10: expression : variable ASSIGNOP logic_expression

z[3]=4

Line 10: expression_statement : expression SEMICOLON

z[3]=4;


Line 10: statement : expression_statement

z[3]=4;


Line 10: statements : statements statement

int y;
int z[30];
y=3;
println(y);
z[3]=4;


Line 10: variable : ID

y

Line 10: factor : CONST_INT

3

Line 10: unary_expression : factor

3

Line 10: term : unary_expression

3

Line 10: simple_expression : term

3

Line 10: rel_expression : simple_expression

3

Line 10: logic_expression : rel_expression

3

Line 10: expression : logic expression

3

Line 10: variable : ID LTHIRD expression RTHIRD

z[3]

Line 10: factor : variable

z[3]

Line 10: unary_expression : factor

z[3]

Line 10: term : unary_expression

z[3]

Line 10: simple_expression : term

z[3]

Line 10: rel_expression : simple_expression

z[3]

Line 10: logic_expression : rel_expression

z[3]

Line 10: expression : variable ASSIGNOP logic_expression

y=z[3]

Line 10: expression_statement : expression SEMICOLON

y=z[3];


Line 10: statement : expression_statement

y=z[3];


Line 10: statements : statements statement

int y;
int z[30];
y=3;
println(y);
z[3]=4;
y=z[3];


Line 10: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(y);


Line 10: statements : statements statement

int y;
int z[30];
y=3;
println(y);
z[3]=4;
y=z[3];
println(y);


Line 11: factor : CONST_INT

3

Line 11: unary_expression : factor

3

Line 11: term : unary_expression

3

Line 11: simple_expression : term

3

Line 11: rel_expression : simple_expression

3

Line 11: logic_expression : rel_expression

3

Line 11: expression : logic expression

3

Line 11: variable : ID LTHIRD expression RTHIRD

mema[3]

Line 11: factor : CONST_INT

5

Line 11: unary_expression : factor

5

Line 11: term : unary_expression

5

Line 11: simple_expression : term

5

Line 11: rel_expression : simple_expression

5

Line 11: logic_expression : rel_expression

5

Line 11: expression : variable ASSIGNOP logic_expression

mema[3]=5

Line 11: expression_statement : expression SEMICOLON

mema[3]=5;


Line 11: statement : expression_statement

mema[3]=5;


Line 11: statements : statements statement

int y;
int z[30];
y=3;
println(y);
z[3]=4;
y=z[3];
println(y);
mema[3]=5;


Line 11: variable : ID

y

Line 11: factor : CONST_INT

3

Line 11: unary_expression : factor

3

Line 11: term : unary_expression

3

Line 11: simple_expression : term

3

Line 11: rel_expression : simple_expression

3

Line 11: logic_expression : rel_expression

3

Line 11: expression : logic expression

3

Line 11: variable : ID LTHIRD expression RTHIRD

mema[3]

Line 11: factor : variable

mema[3]

Line 11: unary_expression : factor

mema[3]

Line 11: term : unary_expression

mema[3]

Line 11: simple_expression : term

mema[3]

Line 11: rel_expression : simple_expression

mema[3]

Line 11: logic_expression : rel_expression

mema[3]

Line 11: expression : variable ASSIGNOP logic_expression

y=mema[3]

Line 11: expression_statement : expression SEMICOLON

y=mema[3];


Line 11: statement : expression_statement

y=mema[3];


Line 11: statements : statements statement

int y;
int z[30];
y=3;
println(y);
z[3]=4;
y=z[3];
println(y);
mema[3]=5;
y=mema[3];


Line 11: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(y);


Line 11: statements : statements statement

int y;
int z[30];
y=3;
println(y);
z[3]=4;
y=z[3];
println(y);
mema[3]=5;
y=mema[3];
println(y);


Line 12: variable : ID

x

Line 12: factor : CONST_INT

6

Line 12: unary_expression : factor

6

Line 12: term : unary_expression

6

Line 12: simple_expression : term

6

Line 12: rel_expression : simple_expression

6

Line 12: logic_expression : rel_expression

6

Line 12: expression : variable ASSIGNOP logic_expression

x=6

Line 12: expression_statement : expression SEMICOLON

x=6;


Line 12: statement : expression_statement

x=6;


Line 12: statements : statements statement

int y;
int z[30];
y=3;
println(y);
z[3]=4;
y=z[3];
println(y);
mema[3]=5;
y=mema[3];
println(y);
x=6;


Line 12: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(x);


Line 12: statements : statements statement

int y;
int z[30];
y=3;
println(y);
z[3]=4;
y=z[3];
println(y);
mema[3]=5;
y=mema[3];
println(y);
x=6;
println(x);


Line 13: compound_statement : LCURL statements RCURL

{
  int y;
  int z[30];
  y=3;
  println(y);
  z[3]=4;
  y=z[3];
  println(y);
  mema[3]=5;
  y=mema[3];
  println(y);
  x=6;
  println(x);
}





ScopeTable # 1.1
 1 --> < y , ID{disp = -2} > 
 2 --> < z , ID{disp = -62} > 



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 


Line 13: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
  int y;
  int z[30];
  y=3;
  println(y);
  z[3]=4;
  y=z[3];
  println(y);
  mema[3]=5;
  y=mema[3];
  println(y);
  x=6;
  println(x);
}



Line 13: unit : func_definition

int main(){
  int y;
  int z[30];
  y=3;
  println(y);
  z[3]=4;
  y=z[3];
  println(y);
  mema[3]=5;
  y=mema[3];
  println(y);
  x=6;
  println(x);
}



Line 13: program : program unit

int x;
int mema[5];
int main(){
  int y;
  int z[30];
  y=3;
  println(y);
  z[3]=4;
  y=z[3];
  println(y);
  mema[3]=5;
  y=mema[3];
  println(y);
  x=6;
  println(x);
}



Line 13: start : program



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 



Total lines: 13
Total errors: 0

