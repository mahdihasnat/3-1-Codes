Line 3: type_specifier : INT

int 

Line 5: type_specifier : INT

int 

Line 5: declaration_list : ID

x

Line 5: var_declaration : type_specifier declaration_list SEMICOLON

int x;


Line 5: statement : var_declaration

int x;


Line 5: statements : statement

int x;


Line 7: type_specifier : INT

int 

Line 7: declaration_list : ID

y

Line 7: var_declaration : type_specifier declaration_list SEMICOLON

int y;


Line 7: statement : var_declaration

int y;


Line 7: statements : statement

int y;


Line 8: type_specifier : FLOAT

float 

Line 8: declaration_list : ID

z

Line 8: var_declaration : type_specifier declaration_list SEMICOLON

float z;


Line 8: statement : var_declaration

float z;


Line 8: statements : statements statement

int y;
float z;


Line 9: type_specifier : INT

int 

Line 9: declaration_list : ID LTHIRD CONST_INT RTHIRD

t[10]

Line 9: var_declaration : type_specifier declaration_list SEMICOLON

int t[10];


Line 9: statement : var_declaration

int t[10];


Line 9: statements : statements statement

int y;
float z;
int t[10];


Line 11: factor : CONST_INT

1

Line 11: unary_expression : factor

1

Line 11: term : unary_expression

1

Line 11: simple_expression : term

1

Line 11: rel_expression : simple_expression

1

Line 11: logic_expression : rel_expression

1

Line 11: expression : logic expression

1

Line 12: factor : CONST_INT

2

Line 12: unary_expression : factor

2

Line 12: term : unary_expression

2

Line 12: simple_expression : term

2

Line 12: rel_expression : simple_expression

2

Line 12: logic_expression : rel_expression

2

Line 12: expression : logic expression

2

Line 12: statement : RETURN expression SEMICOLON

return 2;


Line 14: statement : IF LPAREN expression RPAREN statement

if (1)return 2;


Line 14: statements : statement

if (1)return 2;


Line 14: compound_statement : LCURL statements RCURL

{
  if (1)return 2;
}





ScopeTable # 1.1.1.1



ScopeTable # 1.1.1
 1 --> < y , ID{disp = -4} > 
 2 --> < z , ID{disp = -6} > 
 26 --> < t , ID{disp = -26} > 



ScopeTable # 1.1
 0 --> < x , ID{disp = -2} > 



ScopeTable # 1
 24 --> < foo , ID{disp = -1} > 


Line 14: statement : compound_statement

{
  if (1)return 2;
}



Line 14: statements : statements statement

int y;
float z;
int t[10];
{
  if (1)return 2;
}



Line 15: compound_statement : LCURL statements RCURL

{
  int y;
  float z;
  int t[10];
  {
    if (1)return 2;
  }
}





ScopeTable # 1.1.1
 1 --> < y , ID{disp = -4} > 
 2 --> < z , ID{disp = -6} > 
 26 --> < t , ID{disp = -26} > 



ScopeTable # 1.1
 0 --> < x , ID{disp = -2} > 



ScopeTable # 1
 24 --> < foo , ID{disp = -1} > 


Line 15: statement : compound_statement

{
  int y;
  float z;
  int t[10];
  {
    if (1)return 2;
  }
}



Line 15: statements : statements statement

int x;
{
  int y;
  float z;
  int t[10];
  {
    if (1)return 2;
  }
}



Line 16: compound_statement : LCURL statements RCURL

{
  int x;
  {
    int y;
    float z;
    int t[10];
    {
      if (1)return 2;
    }
  }
}





ScopeTable # 1.1
 0 --> < x , ID{disp = -2} > 



ScopeTable # 1
 24 --> < foo , ID{disp = -1} > 


Line 16: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int foo(){
  int x;
  {
    int y;
    float z;
    int t[10];
    {
      if (1)return 2;
    }
  }
}



Line 16: unit : func_definition

int foo(){
  int x;
  {
    int y;
    float z;
    int t[10];
    {
      if (1)return 2;
    }
  }
}



Line 16: program : unit

int foo(){
  int x;
  {
    int y;
    float z;
    int t[10];
    {
      if (1)return 2;
    }
  }
}



Line 18: type_specifier : INT

int 

Line 19: argument_list :



Line 19: factor : ID LPAREN argument_list RPAREN

foo()

Line 19: unary_expression : factor

foo()

Line 19: term : unary_expression

foo()

Line 19: simple_expression : term

foo()

Line 19: rel_expression : simple_expression

foo()

Line 19: logic_expression : rel_expression

foo()

Line 19: expression : logic expression

foo()

Line 19: expression_statement : expression SEMICOLON

foo();


Line 19: statement : expression_statement

foo();


Line 19: statements : statement

foo();


Line 20: compound_statement : LCURL statements RCURL

{
  foo();
}





ScopeTable # 1.2



ScopeTable # 1
 1 --> < main , ID{disp = -1} > 
 24 --> < foo , ID{disp = -1} > 


Line 20: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
  foo();
}



Line 20: unit : func_definition

int main(){
  foo();
}



Line 20: program : program unit

int foo(){
  int x;
  {
    int y;
    float z;
    int t[10];
    {
      if (1)return 2;
    }
  }
}

int main(){
  foo();
}



Line 21: start : program



ScopeTable # 1
 1 --> < main , ID{disp = -1} > 
 24 --> < foo , ID{disp = -1} > 



Total lines: 21
Total errors: 0

