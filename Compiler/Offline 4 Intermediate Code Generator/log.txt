Line 2: type_specifier : INT

int 

Line 2: declaration_list : ID

x

Line 2: var_declaration : type_specifier declaration_list SEMICOLON

int x;


Line 2: unit : var_declaration

int x;


Line 2: program : unit

int x;


Line 3: type_specifier : INT

int 

Line 3: declaration_list : ID LTHIRD CONST_INT RTHIRD

dp[100]

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int dp[100];


Line 3: unit : var_declaration

int dp[100];


Line 3: program : program unit

int x;
int dp[100];


Line 4: type_specifier : INT

int 

Line 4: declaration_list : ID LTHIRD CONST_INT RTHIRD

mema[100]

Line 4: var_declaration : type_specifier declaration_list SEMICOLON

int mema[100];


Line 4: unit : var_declaration

int mema[100];


Line 4: program : program unit

int x;
int dp[100];
int mema[100];


Line 5: type_specifier : VOID

void 

Line 8: compound_statement : LCURL RCURL

{
}





ScopeTable # 1.1



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 2 --> < dp , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 
 29 --> < fun , ID{disp = -1} > 


Line 8: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void fun(){
}



Line 8: unit : func_definition

void fun(){
}



Line 8: program : program unit

int x;
int dp[100];
int mema[100];
void fun(){
}



Line 9: type_specifier : VOID

void 

Line 9: type_specifier : INT

int 

Line 9: parameter_list : type_specifier ID

int x

Line 9: type_specifier : INT

int 

Line 9: parameter_list : parameter_list COMMA type_specifier ID

int x,int y

Line 11: compound_statement : LCURL RCURL

{
}





ScopeTable # 1.2
 0 --> < x , ID{disp = 4} > 
 1 --> < y , ID{disp = 6} > 



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 2 --> < dp , ID{disp = -1} > 
 24 --> < foo , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 
 29 --> < fun , ID{disp = -1} > 


Line 11: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

void foo(int x,int y){
}



Line 11: unit : func_definition

void foo(int x,int y){
}



Line 11: program : program unit

int x;
int dp[100];
int mema[100];
void fun(){
}

void foo(int x,int y){
}



Line 12: type_specifier : INT

int 

Line 14: factor : CONST_INT

10

Line 14: unary_expression : factor

10

Line 14: term : unary_expression

10

Line 14: simple_expression : term

10

Line 14: rel_expression : simple_expression

10

Line 14: logic_expression : rel_expression

10

Line 14: expression : logic expression

10

Line 14: variable : ID LTHIRD expression RTHIRD

dp[10]

Line 14: factor : variable

dp[10]

Line 14: unary_expression : factor

dp[10]

Line 14: term : unary_expression

dp[10]

Line 14: simple_expression : term

dp[10]

Line 14: rel_expression : simple_expression

dp[10]

Line 14: logic_expression : rel_expression

dp[10]

Line 14: expression : logic expression

dp[10]

Line 14: statement : RETURN expression SEMICOLON

return dp[10];


Line 14: statements : statement

return dp[10];


Line 15: compound_statement : LCURL statements RCURL

{
  return dp[10];
}





ScopeTable # 1.3



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 2 --> < dp , ID{disp = -1} > 
 9 --> < bar , ID{disp = -1} > 
 24 --> < foo , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 
 29 --> < fun , ID{disp = -1} > 


Line 15: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int bar(){
  return dp[10];
}



Line 15: unit : func_definition

int bar(){
  return dp[10];
}



Line 15: program : program unit

int x;
int dp[100];
int mema[100];
void fun(){
}

void foo(int x,int y){
}

int bar(){
  return dp[10];
}



Line 17: type_specifier : INT

int 

Line 19: argument_list :



Line 19: factor : ID LPAREN argument_list RPAREN

fun()

Line 19: unary_expression : factor

fun()

Line 19: term : unary_expression

fun()

Line 19: simple_expression : term

fun()

Line 19: rel_expression : simple_expression

fun()

Line 19: logic_expression : rel_expression

fun()

Line 19: expression : logic expression

fun()

Line 19: expression_statement : expression SEMICOLON

fun();


Line 19: statement : expression_statement

fun();


Line 19: statements : statement

fun();


Line 20: variable : ID

x

Line 20: factor : CONST_INT

10

Line 20: unary_expression : factor

10

Line 20: term : unary_expression

10

Line 20: simple_expression : term

10

Line 20: rel_expression : simple_expression

10

Line 20: logic_expression : rel_expression

10

Line 20: expression : variable ASSIGNOP logic_expression

x=10

Line 20: expression_statement : expression SEMICOLON

x=10;


Line 20: statement : expression_statement

x=10;


Line 20: statements : statements statement

fun();
x=10;


Line 21: factor : CONST_INT

5

Line 21: unary_expression : factor

5

Line 21: term : unary_expression

5

Line 21: simple_expression : term

5

Line 21: rel_expression : simple_expression

5

Line 21: logic_expression : rel_expression

5

Line 21: expression : logic expression

5

Line 21: variable : ID LTHIRD expression RTHIRD

mema[5]

Line 21: factor : CONST_INT

34

Line 21: unary_expression : factor

34

Line 21: term : unary_expression

34

Line 21: simple_expression : term

34

Line 21: rel_expression : simple_expression

34

Line 21: logic_expression : rel_expression

34

Line 21: expression : variable ASSIGNOP logic_expression

mema[5]=34

Line 21: expression_statement : expression SEMICOLON

mema[5]=34;


Line 21: statement : expression_statement

mema[5]=34;


Line 21: statements : statements statement

fun();
x=10;
mema[5]=34;


Line 22: variable : ID

x

Line 22: factor : variable

x

Line 22: unary_expression : factor

x

Line 22: term : unary_expression

x

Line 22: simple_expression : term

x

Line 22: rel_expression : simple_expression

x

Line 22: logic_expression : rel_expression

x

Line 22: arguments : logic_expression

x

Line 22: factor : CONST_INT

5

Line 22: unary_expression : factor

5

Line 22: term : unary_expression

5

Line 22: simple_expression : term

5

Line 22: rel_expression : simple_expression

5

Line 22: logic_expression : rel_expression

5

Line 22: expression : logic expression

5

Line 22: variable : ID LTHIRD expression RTHIRD

mema[5]

Line 22: factor : variable

mema[5]

Line 22: unary_expression : factor

mema[5]

Line 22: term : unary_expression

mema[5]

Line 22: simple_expression : term

mema[5]

Line 22: rel_expression : simple_expression

mema[5]

Line 22: logic_expression : rel_expression

mema[5]

Line 22: arguments : arguments COMMA logic_expression

x,mema[5]

Line 22: argument_list : arguments

x,mema[5]

Line 22: factor : ID LPAREN argument_list RPAREN

foo(x,mema[5])

Line 22: unary_expression : factor

foo(x,mema[5])

Line 22: term : unary_expression

foo(x,mema[5])

Line 22: simple_expression : term

foo(x,mema[5])

Line 22: rel_expression : simple_expression

foo(x,mema[5])

Line 22: logic_expression : rel_expression

foo(x,mema[5])

Line 22: expression : logic expression

foo(x,mema[5])

Line 22: expression_statement : expression SEMICOLON

foo(x,mema[5]);


Line 22: statement : expression_statement

foo(x,mema[5]);


Line 22: statements : statements statement

fun();
x=10;
mema[5]=34;
foo(x,mema[5]);


Line 23: factor : CONST_INT

10

Line 23: unary_expression : factor

10

Line 23: term : unary_expression

10

Line 23: simple_expression : term

10

Line 23: rel_expression : simple_expression

10

Line 23: logic_expression : rel_expression

10

Line 23: expression : logic expression

10

Line 23: variable : ID LTHIRD expression RTHIRD

dp[10]

Line 23: factor : CONST_INT

199

Line 23: unary_expression : factor

199

Line 23: term : unary_expression

199

Line 23: simple_expression : term

199

Line 23: rel_expression : simple_expression

199

Line 23: logic_expression : rel_expression

199

Line 23: expression : variable ASSIGNOP logic_expression

dp[10]=199

Line 23: expression_statement : expression SEMICOLON

dp[10]=199;


Line 23: statement : expression_statement

dp[10]=199;


Line 23: statements : statements statement

fun();
x=10;
mema[5]=34;
foo(x,mema[5]);
dp[10]=199;


Line 24: variable : ID

x

Line 24: argument_list :



Line 24: factor : ID LPAREN argument_list RPAREN

bar()

Line 24: unary_expression : factor

bar()

Line 24: term : unary_expression

bar()

Line 24: simple_expression : term

bar()

Line 24: rel_expression : simple_expression

bar()

Line 24: logic_expression : rel_expression

bar()

Line 24: expression : variable ASSIGNOP logic_expression

x=bar()

Line 24: expression_statement : expression SEMICOLON

x=bar();


Line 24: statement : expression_statement

x=bar();


Line 24: statements : statements statement

fun();
x=10;
mema[5]=34;
foo(x,mema[5]);
dp[10]=199;
x=bar();


Line 25: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

println(x);


Line 25: statements : statements statement

fun();
x=10;
mema[5]=34;
foo(x,mema[5]);
dp[10]=199;
x=bar();
println(x);


Line 26: compound_statement : LCURL statements RCURL

{
  fun();
  x=10;
  mema[5]=34;
  foo(x,mema[5]);
  dp[10]=199;
  x=bar();
  println(x);
}





ScopeTable # 1.4



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 2 --> < dp , ID{disp = -1} > 
 9 --> < bar , ID{disp = -1} > 
 24 --> < foo , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 
 29 --> < fun , ID{disp = -1} > 


Line 26: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
  fun();
  x=10;
  mema[5]=34;
  foo(x,mema[5]);
  dp[10]=199;
  x=bar();
  println(x);
}



Line 26: unit : func_definition

int main(){
  fun();
  x=10;
  mema[5]=34;
  foo(x,mema[5]);
  dp[10]=199;
  x=bar();
  println(x);
}



Line 26: program : program unit

int x;
int dp[100];
int mema[100];
void fun(){
}

void foo(int x,int y){
}

int bar(){
  return dp[10];
}

int main(){
  fun();
  x=10;
  mema[5]=34;
  foo(x,mema[5]);
  dp[10]=199;
  x=bar();
  println(x);
}



Line 26: start : program



ScopeTable # 1
 0 --> < x , ID{disp = -1} > 
 1 --> < main , ID{disp = -1} > 
 2 --> < dp , ID{disp = -1} > 
 9 --> < bar , ID{disp = -1} > 
 24 --> < foo , ID{disp = -1} > 
 26 --> < mema , ID{disp = -1} > 
 29 --> < fun , ID{disp = -1} > 



Total lines: 26
Total errors: 0

