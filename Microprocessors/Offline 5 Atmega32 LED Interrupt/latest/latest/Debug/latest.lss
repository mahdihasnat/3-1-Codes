
latest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  000001b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000063a  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b1  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026e  00000000  00000000  00000e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032d  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007a  00000000  00000000  0000141d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001497  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_3>:


volatile uint8_t state  = STATIC_STATE;

ISR(INT2_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	state ^= 1;
  8a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	89 27       	eor	r24, r25
  92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <main>:
}


int main(void)
{
	MCUCSR |= (1<<ISC2);
  a4:	84 b7       	in	r24, 0x34	; 52
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	84 bf       	out	0x34, r24	; 52
	GICR |= (1<<INT2);
  aa:	8b b7       	in	r24, 0x3b	; 59
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	8b bf       	out	0x3b, r24	; 59
	sei();
  b0:	78 94       	sei
	DDRB = 0x00;
  b2:	17 ba       	out	0x17, r1	; 23
	DDRA = 0xFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;
  b8:	81 bb       	out	0x11, r24	; 17
	led_matrix[0]= 0b00000000;
  ba:	e1 e6       	ldi	r30, 0x61	; 97
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1
	led_matrix[1]= 0b00000110;
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	81 83       	std	Z+1, r24	; 0x01
	led_matrix[2]= 0b00000110;
  c4:	82 83       	std	Z+2, r24	; 0x02
	led_matrix[3]= 0b00000110;
  c6:	83 83       	std	Z+3, r24	; 0x03
	led_matrix[4]= 0b00000110;
  c8:	84 83       	std	Z+4, r24	; 0x04
	led_matrix[5]= 0b00000110;
  ca:	85 83       	std	Z+5, r24	; 0x05
	led_matrix[6]= 0b11111110;
  cc:	8e ef       	ldi	r24, 0xFE	; 254
  ce:	86 83       	std	Z+6, r24	; 0x06
	led_matrix[7]= 0b11111110;
  d0:	87 83       	std	Z+7, r24	; 0x07
    /* Replace with your application code */
    while (1) 
    {	
		
		
		if(state == STATIC_STATE)
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d6:	88 23       	and	r24, r24
  d8:	99 f0       	breq	.+38     	; 0x100 <main+0x5c>
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	0f c0       	rjmp	.+30     	; 0xfc <main+0x58>
			
		}
		else 
		{
			for(uint8_t row = 0 ; row < TOTAL_ROW ; row++)
				led_matrix[row] = RightRotateColumn(led_matrix[row]);
  de:	e3 2f       	mov	r30, r19
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	ef 59       	subi	r30, 0x9F	; 159
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	20 81       	ld	r18, Z
  e8:	82 2f       	mov	r24, r18
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	22 1f       	adc	r18, r18
  f2:	22 27       	eor	r18, r18
  f4:	22 1f       	adc	r18, r18
  f6:	82 2b       	or	r24, r18
  f8:	80 83       	st	Z, r24
		{
			
		}
		else 
		{
			for(uint8_t row = 0 ; row < TOTAL_ROW ; row++)
  fa:	3f 5f       	subi	r19, 0xFF	; 255
  fc:	38 30       	cpi	r19, 0x08	; 8
  fe:	78 f3       	brcs	.-34     	; 0xde <main+0x3a>
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	17 c0       	rjmp	.+46     	; 0x134 <main+0x90>
inline void print_led()
{
	
	for(uint8_t row = 0; row < TOTAL_ROW ; row ++)
	{
		ROW_PORT = ~(1<<row);
 106:	e2 2f       	mov	r30, r18
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 2e       	mov	r0, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <main+0x72>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	0a 94       	dec	r0
 118:	e2 f7       	brpl	.-8      	; 0x112 <main+0x6e>
 11a:	80 95       	com	r24
 11c:	82 bb       	out	0x12, r24	; 18
		COLUMN_PORT = led_matrix[row];
 11e:	ef 59       	subi	r30, 0x9F	; 159
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	80 81       	ld	r24, Z
 124:	8b bb       	out	0x1b, r24	; 27


inline void print_led()
{
	
	for(uint8_t row = 0; row < TOTAL_ROW ; row ++)
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	01 c0       	rjmp	.+2      	; 0x12c <main+0x88>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	28 30       	cpi	r18, 0x08	; 8
 12e:	58 f3       	brcs	.-42     	; 0x106 <main+0x62>
		else 
		{
			for(uint8_t row = 0 ; row < TOTAL_ROW ; row++)
				led_matrix[row] = RightRotateColumn(led_matrix[row]);
		}
		for(int i=0;i<2000;i++)
 130:	4f 5f       	subi	r20, 0xFF	; 255
 132:	5f 4f       	sbci	r21, 0xFF	; 255
 134:	40 3d       	cpi	r20, 0xD0	; 208
 136:	87 e0       	ldi	r24, 0x07	; 7
 138:	58 07       	cpc	r21, r24
 13a:	bc f3       	brlt	.-18     	; 0x12a <main+0x86>
 13c:	ca cf       	rjmp	.-108    	; 0xd2 <main+0x2e>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
