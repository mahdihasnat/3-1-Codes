
Practice Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005af  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000520  00000000  00000000  0000073f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ed  00000000  00000000  00000c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002df  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005c  00000000  00000000  0000114f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	DDRC = 0b00001001;
  6c:	89 e0       	ldi	r24, 0x09	; 9
  6e:	84 bb       	out	0x14, r24	; 20
	DDRB = 0b00000000;
  70:	17 ba       	out	0x17, r1	; 23
	unsigned char out = 0;
	PORTC = out;
  72:	15 ba       	out	0x15, r1	; 21
    while (1) 
    {
		unsigned char in = PINB;
  74:	86 b3       	in	r24, 0x16	; 22
		if((in & 0b10000000) == 0) // B7 as active low push buttton
  76:	88 23       	and	r24, r24
  78:	ec f3       	brlt	.-6      	; 0x74 <main+0x8>
		{
			unsigned char count = 0;
			count=0;
			count+=(in>>0)&1;
  7a:	98 2f       	mov	r25, r24
  7c:	91 70       	andi	r25, 0x01	; 1
			count+=(in>>2)&1;
  7e:	82 fb       	bst	r24, 2
  80:	22 27       	eor	r18, r18
  82:	20 f9       	bld	r18, 0
  84:	92 0f       	add	r25, r18
			count+=(in>>4)&1;
  86:	82 95       	swap	r24
  88:	81 70       	andi	r24, 0x01	; 1
  8a:	89 0f       	add	r24, r25
			out =  (count&1) | (((count>>1)&1) << 3);
  8c:	81 fb       	bst	r24, 1
  8e:	44 27       	eor	r20, r20
  90:	40 f9       	bld	r20, 0
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	9a 01       	movw	r18, r20
  96:	22 0f       	add	r18, r18
  98:	33 1f       	adc	r19, r19
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	22 0f       	add	r18, r18
  a0:	33 1f       	adc	r19, r19
  a2:	81 70       	andi	r24, 0x01	; 1
  a4:	82 2b       	or	r24, r18
			PORTC = out;
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	e5 cf       	rjmp	.-54     	; 0x74 <main+0x8>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
